-> users and user authentication lesson: flask security with hashed passwords  
    -> learn about password security with hashed passwords for protecting user information  
    -> the lesson covers securing passwords and preventing unauthorised access through authentication  
    -> users’ passwords are at risk of being stolen, so it's crucial to protect them properly  
    -> the focus is on using hashing techniques to ensure passwords are stored securely without revealing their content  
    -> learn the importance of keeping passwords safe from attackers  
    -> attackers often exploit reused passwords across multiple websites to steal information  
    -> store passwords in a hashed format to avoid storing plain-text passwords that can be easily compromised  

-> protecting users' information from attackers  
    -> many users reuse passwords across websites, making them vulnerable to hacking  
    -> users like your family or friends may not understand the risks of poor password security  
    -> you need to protect their data by storing passwords in a secure, non-readable format  
    -> if a website is hacked, storing passwords securely prevents attackers from gaining access to sensitive data  
    -> storing hashed passwords, instead of plain-text passwords, ensures the data is protected even if attackers breach the system  

-> what are hashed passwords?  
    -> hashed passwords are the result of a password passed through a hashing function, altered with salt for security  
    -> hashing makes the password unrecognisable and hard to reverse-engineer  
    -> salt is used to add randomness to the hashing process, preventing attackers from using precomputed hash databases (rainbow tables)  
    -> while recovering the original password from the hash is difficult, it’s possible with the correct hashing function and salt  
    -> hashing is a complex process that is made easier with the help of libraries like werkzeug  

-> give password hashing a spin  
    -> werkzeug is a library that handles password hashing and verification for you  
    -> the `generate_password_hash()` function hashes a password using a hashing method and salt  
    -> you can modify the hashing method or salt length, but the default is usually sufficient  
    -> the `check_password_hash()` function checks if the hash matches a given password, helping verify user credentials  
    -> these functions simplify the implementation of secure password storage and verification in your application  

-> adding changes to the user model  
    -> to incorporate password hashing into your app, you modify your user model by adding a hashed password column  
    -> the `password` property should not be accessible directly, protecting the password field from being exposed  
    -> a setter function is used to hash the password before storing it in the database  
    -> the `verify_password()` method checks if the entered password matches the hashed password stored in the database  
    -> this approach ensures that users' passwords remain secure and are never stored as plain text  

-> hashed passwords with flask shell  
    -> you can test password hashing using flask shell, a convenient way to interact with your app's data  
    -> when trying to access a user's password directly, an error is raised, ensuring the password isn't exposed  
    -> different password hashes are generated even for identical passwords due to the added salt, improving security  
    -> unit tests can be written to check if the password hashing functionality is working correctly  
    -> test scenarios include verifying that hashes are different for the same password, ensuring the password validation is secure  

-> summary: flask security with hashed passwords  
    -> you learnt the importance of securing user passwords, especially given the risk of password reuse across sites  
    -> instead of storing plain text passwords, you store their hashed versions for added security  
    -> the hashing process uses a function and salt to make the original password nearly impossible to recover  
    -> you explored the werkzeug library's password hashing functions, `generate_password_hash()` and `check_password_hash()`  
    -> you implemented hashed passwords in your app's user model and tested the functionality in flask shell  
    -> these steps are fundamental in securing user authentication in web applications  