-> users and user authentication lesson: flask-login in action  
    -> this lesson focuses on integrating flask-login to manage user login and logout functionality  
    -> flask-login is used to handle user sessions, making it easier to manage authenticated users  

-> flask-login functionality  
    -> add an email column to the `user` model to allow users to log in with their email  
    -> this is more user-friendly since many users remember their email addresses better than usernames  

-> logging in  
    -> modify the view function for the `/login` route to handle user login  
    -> the view function will check if the user exists in the database and if the password is correct  
    -> on successful login, use flask-login’s `login_user()` to log the user in and start the session  
    -> if the user was redirected to the login page from a restricted page, they will be redirected back after logging in  
    -> the form should handle both GET (display the login form) and POST (process form submission)  
    -> if login fails, flash an error message to the user  

    **code example**:  
    ```python  
    from flask import render_template, redirect, request, url_for, flash  
    from flask_login import login_user  
    user = User.query.filter_by(email=form.email.data).first()  
    if user and user.check_password(form.password.data):  
        login_user(user, remember=form.remember_me.data)  
        next_page = request.args.get('next')  
        return redirect(next_page or url_for('main.index'))  
    flash('invalid email or password')  
    return render_template('auth/login.html', form=form)  
    ```  

-> logging out  
    -> the `logout_user()` function is used to log out the current user and reset the session  
    -> this can be triggered with a `/logout` route  
    -> you can customise the logout message and behaviour, such as flashing a message when the user logs out  

    **code example**:  
    ```python  
    @auth.route('/logout')  
    def logout():  
        logout_user()  
        flash('you have been logged out')  
        return redirect(url_for('main.index'))  
    ```  

-> changes to templates  
    -> update the `base.html` template to show login/logout options based on the user’s authentication status  
    -> use `current_user.is_authenticated` to check if the user is logged in and display the appropriate links  

    **code example**:  
    ```html  
    <ul class="nav navbar-nav navbar-right">  
        {% if current_user.is_authenticated %}  
            <li><a href="{{ url_for('auth.logout') }}">log out</a></li>  
        {% else %}  
            <li><a href="{{ url_for('auth.login') }}">log in</a></li>  
        {% endif %}  
    </ul>  
    ```  

-> test your login!  
    -> to test the login functionality, add a user to the database (with email, username, and password)  
    -> use the flask shell to create a user object and commit it to the database  
    -> launch the app and navigate to the login page, then test logging in with the user you created  

    **code example**:  
    ```python  
    flask shell  
    >>> u = User(email='paul@example.com', username='john', password='password')  
    >>> db.session.add(u)  
    >>> db.session.commit()  
    ```  

-> how flask-login works  
    -> upon login, flask-login stores the user’s ID in the session  
    -> on every subsequent request, flask-login checks the session for the user ID and loads the corresponding user object  
    -> if the user is authenticated, `current_user` will be an instance of `User`; otherwise, it will be an `AnonymousUser`  
    -> the `current_user` variable is automatically available in templates and view functions  

    **flow**:  
    1. user accesses the login page.  
    2. after form submission, flask-login's `login_user()` is called, storing the user’s ID in the session.  
    3. redirect the user to the appropriate page (either the page they tried to access or the homepage).  
    4. on future requests, flask-login checks the session for the user ID and loads the user object.  

-> summary: flask-login in action  
    -> you now understand how to handle user login and logout using flask-login  
    -> the steps included modifying the `user` model, adding a login view, handling the login form, and updating templates  
    -> you also learned how flask-login handles user sessions and manages the current user context  
    -> in the next lesson, you’ll learn how to implement user registration so users can create their own accounts  