-> outline 
	-> generating password hashes 
	-> setting and verifying passwords
	-> a demonstration in the Flask shell 

-> add passwords to the user model 
	-> he is in the models.py file 
	-> protecting the user's passwords 
	-> add a column 
		-> he adds a column to the User class 
		-> this is done with the .Column method and is to store a hashed version of the passwords 
		-> you can do a database migration with a new column 

	-> for the plain text password 
		-> the password can be made into a property of the user model 	
		-> he defines a new method (function) in the User class 
			-> this throws an error in case someone tries to access it 

	-> the user password should be writable, but not readable 
		-> he adds a setter for the property
		-> this is done using the .setter method 
		-> he puts the plain text password through a hashing algorithm 	
			-> this is done using the .password method and the Werkzeug library 
			-> this takes the plain text password, a hashing method and a salt length 
		-> hashing <- taking the password with salt and putting it through a series of one way transformations
		-> he then defines another method (attribute) in the User class 
			-> the verify_method function 
			-> Werkzeug has a check_password function 
				-> this takes the hash and the password and returns True if this is correct and False if otherwise 

	-> testing the user methods in the shell
		-> in the CLI 
			-> he initialises a blank user 
			-> he sets the password to a string 
			-> he then tests the methods he just defined on this 
				-> accessing the password 
				-> accessing the hash 