-> users and user authentication lesson  
    -> create a user registration form  
    -> 6 min to complete Â· by brandon gigous  

    -> contents  
        -> introduction  
        -> registration form  
        -> add a link to the login page  
        -> summary: how to create a flask registration form  

    -> even if you've built login functionality into a python-flask app, there's no way for you to make new accounts without going into a shell session  
    -> in this lesson, you'll make a registration page for new users to sign up for an account  
    -> this registration form will require a lot of validation to avoid users creating accounts randomly  
    -> validation helps prevent a mess in your database and protects your system from malicious users  
    -> users will need to follow guidelines like minimum username lengths and valid email addresses  

    -> the new registration form will go in the file: app/auth/views.py  
        -> the first field is the email, limited to 64 characters  
        -> the username field must match a pattern, ensuring it starts with a letter, followed by any combination of letters, numbers, underscores, or dots  
        -> regular expression flags and error messages are defined for username validation  
        -> the password field requires a password, validated by ensuring it matches a confirmation field  
        -> the confirmation password field is a second password field to confirm user input  
        -> the submit field allows the user to submit the form  

    -> the validation functions use flask-wtf to check if fields meet the criteria  
        -> if the email or username is already taken, a validationerror is raised to inform the user  

    -> the registration form also checks if the username or email already exists in the database  
        -> custom validators ensure uniqueness of email and username to avoid duplicates in the database  

    -> to allow users to access the registration page, add a link to the login template  
        -> the link can also be added to the navbar for easy access  
        -> a new template is required to render the registration form, similar to the login form  

    -> the next step in user authentication is adding the registration view function, covered in the next lesson  

    -> in summary, the registration form includes:  
        -> email validation using flask-wtf validators  
        -> username validation with a regular expression pattern  
        -> password and confirmation password fields to ensure consistency  
        -> a custom validation function to check for duplicate emails or usernames in the database  
        -> a link to the registration page is added to the login template 
 
    -> mentorship makes the difference!  
        -> join the codingnomads' mentorship bootcamp programme for dedicated support  
        -> weekly 1-on-1 screen share meetings with a professional mentor  

    -> the registration form's code is as follows:  
        -> email = stringfield('email', validators=[datarequired(), length(1, 64), email()])  
        -> username = stringfield('username', validators=[datarequired(), length(1, 64), regexp('^[a-zA-Z][a-zA-Z0-9_.*]*$', 0, 'usernames must have only letters, numbers, dots, or underscores')])  
        -> password = passwordfield('password', validators=[datarequired(), equalto('password_confirm', message='passwords do not match')])  
        -> password_confirm = passwordfield('password (confirm):', validators=[datarequired()])  
        -> submit = submitfield('register') 
 
    -> the validation functions for email and username check the database for existing entries and raise a validationerror if needed  
