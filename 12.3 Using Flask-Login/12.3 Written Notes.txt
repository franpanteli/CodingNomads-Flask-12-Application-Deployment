-> users and user authentication lesson: using flask-login  
    -> learn about the flask-login module for managing user authentication in flask applications  
    -> flask-login simplifies handling user sessions and tracking authentication status  

-> flask-login  
    -> flask-login is a lightweight extension that helps manage user sessions and authentication  
    -> it updates the user's authenticated state in the session, making it easier to check if a user is signed in or not  
    -> to install, simply run: `pip install flask-login`  

-> user model prep for authentication  
    -> flask-login requires a user model to function  
    -> the current model may need a few additional properties and methods to support flask-login  
    -> you need to add these properties to your user model to work with flask-login:  
        -> `is_authenticated`: true if the user is logged in, false otherwise  
        -> `is_active`: true if the user account is active, false if disabled  
        -> `is_anonymous`: false for regular users, true for anonymous users  
        -> `get_id()`: a method that returns a unique identifier for the user  

-> using usermixin in the user model  
    -> flask-login provides a `usermixin` class that adds these properties and methods automatically  
    -> to use it, simply add `usermixin` as a base class in your `user` model:  
      ```python  
      class user(usermixin, db.model):  
          # ...  
      ```  

-> using flask-login's loginmanager  
    -> to manage logins, you need to initialise the `loginmanager` class  
    -> the `loginmanager` is responsible for loading users and redirecting unauthenticated users to the login page  
    -> initialise the `loginmanager` in your application factory:  
      ```python  
      from flask_login import loginmanager  
      loginmanager = loginmanager()  
      loginmanager.login_view = 'auth.login'  
      ```  

-> user loader  
    -> flask-login requires a user loader function that returns a user object given a user identifier  
    -> use the `@loginmanager.user_loader` decorator to define this function:  
      ```python  
      @loginmanager.user_loader  
      def load_user(user_id):  
          return user.query.get(int(user_id))  
      ```  

-> protecting routes with `login_required`  
    -> the `login_required` decorator protects routes from being accessed by unauthenticated users  
    -> apply `@login_required` to any route that should be accessible only to logged-in users:  
      ```python  
      from flask_login import login_required  
      @app.route('/top-secret')  
      @login_required  
      def top_secret():  
          return "welcome, vip member!"  
      ```  

-> summary: using flask-login and loginmanager for user authentication  
    -> flask-login handles user sessions and manages authentication  
    -> the user model requires specific properties like `is_authenticated`, `is_active`, and `get_id()`  
    -> initialise `loginmanager` to manage login redirection and user loading  
    -> use `login_required` to protect routes from unauthorised access  